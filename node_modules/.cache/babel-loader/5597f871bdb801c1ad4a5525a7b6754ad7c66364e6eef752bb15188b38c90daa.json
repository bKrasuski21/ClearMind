{"ast":null,"code":"var _jsxFileName = \"/Users/a993/Desktop/caffeineAPP/clear/ClearMind/src/pages/index.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { format, startOfToday, add, endOfMonth, startOfMonth, eachDayOfInterval, isSameMonth, isToday, getDay, getDaysInMonth, getDaysInYear, isLeapYear } from 'date-fns';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/solid';\nimport './index.css'; // Make sure to import your stylesheet\nimport { auth, googleProvider } from '../config/firebase';\nimport { signOut } from 'firebase/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { Menu, Transition } from '@headlessui/react';\nimport { DotsVerticalIcon } from '@heroicons/react/outline';\nimport { Fragment } from 'react';\nimport Button from 'react-bootstrap/Button';\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Area } from \"recharts\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { clear } from '@testing-library/user-event/dist/clear';\n//import { Auth } from '../components/auth';\nimport { LogOffApp } from '../components/auth';\nimport { dataBase } from '../config/firebase'; // data from fire base \nimport { getDocs } from 'firebase/firestore';\nimport { doc, getDoc, collection, addDoc, updateDoc, setDoc } from 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { DateTimeDisplay } from '../components/dateDisplay';\nimport './index.css';\nimport { ValueSetter } from 'date-fns/parse/_lib/Setter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const CafApp = () => {\n  _s();\n  const [chronicMigraines, setChronicMigraines] = useState(false);\n  const [isRemovingMode, setIsRemovingMode] = useState(false);\n  const remove = () => {\n    if (isRemovingMode) {\n      setIsRemovingMode(false);\n    } else {\n      setIsRemovingMode(true);\n    }\n  };\n  const [user, loading, error] = useAuthState(auth); // Get the authenticated user\n  console.log('open!!ed!');\n  const migraineDataRef = collection(dataBase, \"MigraineData\"); // passed in database and the collection we are trying to access. caffeineDatabaseRef -> reference to our UserData collection\n  const [databaseData, setdatabaseData] = useState([]);\n  const [migraineDays, setMigraineDays] = useState({});\n  const navigate = useNavigate();\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  useEffect(() => {\n    handleAverages();\n  }, [currentMonth]);\n  const [notes, setNotes] = useState({}); // State to store notes for each day\n\n  const startDay = startOfMonth(currentMonth);\n  const endDay = endOfMonth(currentMonth);\n  const days = eachDayOfInterval({\n    start: startDay.getDay() === 0 ? startDay : add(startDay, {\n      days: -startDay.getDay()\n    }),\n    end: endDay\n  });\n  const previousMonth = () => {\n    const newMonth = add(currentMonth, {\n      months: -1\n    });\n    setCurrentMonth(newMonth);\n    handleAverages(newMonth);\n  };\n  const nextMonth = () => {\n    const newMonth = add(currentMonth, {\n      months: 1\n    });\n    setCurrentMonth(newMonth);\n    handleAverages(newMonth);\n  };\n  useEffect(() => {\n    if (user) {\n      const userDocRef = doc(dataBase, 'MigraineData', user.uid);\n      const fetchUserData = async () => {\n        const docSnap = await getDoc(userDocRef);\n        if (docSnap.exists()) {\n          const data = docSnap.data();\n          setMigraineDays(data.Days || {});\n          setNotes(data.Notes || {});\n        } else {\n          // Document does not exist, initialize with empty data\n          await setDoc(userDocRef, {\n            Days: {},\n            Notes: {}\n          });\n        }\n      };\n      fetchUserData();\n    }\n  }, [user]);\n  const handleDayClick = async day => {\n    const formattedDate = format(day, 'yyyy-MM-dd');\n    const hasMigraine = migraineDays[formattedDate];\n    if (!user) {\n      if (!isRemovingMode) {\n        const note = hasMigraine ? prompt('Edit your migraine note:', notes[formattedDate] || '') : prompt('Migraine Severity 1-10:', '');\n        const hasNote = note !== null && note.trim() !== '';\n        if (hasNote) {\n          // Update local states\n          const newMigraineDays = {\n            ...migraineDays,\n            [formattedDate]: true\n          };\n          const newNotes = {\n            ...notes,\n            [formattedDate]: note.trim()\n          };\n          setMigraineDays(newMigraineDays);\n          setNotes(newNotes);\n\n          // Update Firestore\n          const calendarDataRef = doc(dataBase, 'MigraineData', 'CalendarData');\n          await updateDoc(calendarDataRef, {\n            Days: newMigraineDays,\n            Notes: newNotes\n          });\n        } else if (hasMigraine) {\n          // Remove the note and update Firestore if the user cancels the edit\n          const newMigraineDays = {\n            ...migraineDays,\n            [formattedDate]: false\n          };\n          const newNotes = {\n            ...notes\n          };\n          delete newNotes[formattedDate];\n          setMigraineDays(newMigraineDays);\n          setNotes(newNotes);\n          const calendarDataRef = doc(dataBase, 'MigraineData', 'CalendarData');\n          await updateDoc(calendarDataRef, {\n            Days: newMigraineDays,\n            Notes: newNotes\n          });\n        }\n      }\n      if (isRemovingMode) {\n        const newMigraineDays = {\n          ...migraineDays\n        };\n        const newNotes = {\n          ...notes\n        };\n        delete newMigraineDays[formattedDate]; // Or set to false depending on your data structure\n        delete newNotes[formattedDate];\n        setMigraineDays(newMigraineDays);\n        setNotes(newNotes);\n\n        // Update Firestore\n        const calendarDataRef = doc(dataBase, 'MigraineData', 'CalendarData');\n        await updateDoc(calendarDataRef, {\n          Days: newMigraineDays,\n          Notes: newNotes\n        });\n      }\n    } else {\n      if (!isRemovingMode) {\n        const note = hasMigraine ? prompt('Edit your migraine note:', notes[formattedDate] || '') : prompt('Migraine Severity 1-10:', '');\n        const hasNote = note !== null && note.trim() !== '';\n        if (hasNote) {\n          // Update local states\n          const newMigraineDays = {\n            ...migraineDays,\n            [formattedDate]: true\n          };\n          const newNotes = {\n            ...notes,\n            [formattedDate]: note.trim()\n          };\n          setMigraineDays(newMigraineDays);\n          setNotes(newNotes);\n\n          // Update Firestore\n          const calendarDataRef = doc(dataBase, 'MigraineData', user.uid);\n          await updateDoc(calendarDataRef, {\n            Days: newMigraineDays,\n            Notes: newNotes\n          });\n        } else if (hasMigraine) {\n          // Remove the note and update Firestore if the user cancels the edit\n          const newMigraineDays = {\n            ...migraineDays,\n            [formattedDate]: false\n          };\n          const newNotes = {\n            ...notes\n          };\n          delete newNotes[formattedDate];\n          setMigraineDays(newMigraineDays);\n          setNotes(newNotes);\n          const calendarDataRef = doc(dataBase, 'MigraineData', user.uid);\n          await updateDoc(calendarDataRef, {\n            Days: newMigraineDays,\n            Notes: newNotes\n          });\n        }\n      }\n      if (isRemovingMode) {\n        const newMigraineDays = {\n          ...migraineDays\n        };\n        const newNotes = {\n          ...notes\n        };\n        delete newMigraineDays[formattedDate]; // Or set to false depending on your data structure\n        delete newNotes[formattedDate];\n        setMigraineDays(newMigraineDays);\n        setNotes(newNotes);\n\n        // Update Firestore\n        const calendarDataRef = doc(dataBase, 'MigraineData', user.uid);\n        await updateDoc(calendarDataRef, {\n          Days: newMigraineDays,\n          Notes: newNotes\n        });\n      }\n    }\n  };\n  const HandleLogOff = async () => {\n    try {\n      await signOut(auth);\n      navigate('/');\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const daysInYear = isLeapYear(currentMonth) ? 366 : 365;\n  const daysInMonth = getDaysInMonth(currentMonth);\n\n  // State hooks for averages\n  const [yearlyAverage, setYearlyAverage] = useState(0);\n  const [monthlyAverage, setMonthlyAverage] = useState(0);\n\n  // Function to handle averages\n  const handleAverages = () => {\n    const currentMonthStr = format(currentMonth, 'yyyy-MM');\n    const monthlyMigraineDays = Object.keys(migraineDays).filter(date => date.startsWith(currentMonthStr) && migraineDays[date]);\n    const monthlyCount = monthlyMigraineDays.length;\n    const monthlyAverage = monthlyCount / daysInMonth;\n\n    // If you want to keep a running total for the year as well\n    const yearlyCount = Object.values(migraineDays).filter(day => day).length;\n    const yearlyAverage = yearlyCount / daysInYear;\n    if (monthlyAverage >= 0.49) {\n      setChronicMigraines(true);\n    } else if (monthlyAverage > 0) {\n      setChronicMigraines(false);\n    }\n    setYearlyAverage(yearlyAverage);\n    setMonthlyAverage(monthlyAverage);\n  };\n  useEffect(() => {\n    handleAverages();\n  }, [migraineDays, currentMonth]);\n  const calculateColor = value => {\n    const green = [0, 128, 0]; // RGB for green\n    const red = [255, 0, 0]; // RGB for red\n    // Calculate the RGB values by interpolating between green and red\n    const color = green.map((c, i) => c + Math.round((red[i] - c) * 2 * value));\n    return `rgb(${color.join(',')})`;\n  };\n  const calculateMigraineColor = value => {\n    //const green = [0, 128, 0]; // RGB for green\n    //const color = [255, 255 , 255]\n    const color = [255, Math.max(0, 255 - 25 * value), Math.max(0, 255 - 25 * value)];\n    return `rgb(${color.join(',')})`;\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center-title\",\n          children: \"ClearMind\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 3\n        }, this), user && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: user.displayName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.photoURL,\n            alt: user.displayName,\n            className: \"user-photo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: previousMonth,\n          className: \"navigation-button\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 71\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"month-title\",\n          style: {\n            color: calculateColor(monthlyAverage)\n          },\n          children: format(currentMonth, 'MMMM yyyy')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextMonth,\n          className: \"navigation-button\",\n          children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n            className: \"w-6 h-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 67\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"weekdays-header\",\n        children: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((dayName, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day-cell header\",\n          children: dayName\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-container\",\n        children: days.map((day, index) => {\n          const formattedDate = format(day, 'yyyy-MM-dd');\n          const isCurrentDay = isToday(day);\n          const noteValue = parseInt(notes[formattedDate], 10); // Assuming notes are stored as \"Migraine Severity 1-10\"\n          const dayColor = noteValue ? calculateMigraineColor(noteValue) : 'transparent'; // Default to transparent if no note\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `day-cell ${isSameMonth(day, startDay) ? '' : 'not-in-month'} ${notes[formattedDate] ? 'selected' : ''}`,\n            onClick: () => handleDayClick(day),\n            style: {\n              backgroundColor: `white`,\n              backgroundColor: notes[formattedDate] ? dayColor : ''\n              //border: notes[formattedDate] ? '1px solid black' : ''\n            },\n            children: [format(day, 'd'), notes[formattedDate] && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"note\",\n              children: notes[formattedDate]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 40\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-custom\",\n        onClick: HandleLogOff,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsRemovingMode(!isRemovingMode),\n        className: isRemovingMode ? 'button-remove-mode' : 'button-normal-mode',\n        children: isRemovingMode ? \"Disable Removing Mode\" : \"Remove Migraine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"important\",\n        style: {\n          color: calculateColor(yearlyAverage)\n        },\n        children: [\"Average Migraines for \", format(currentMonth, 'yyyy'), \": \", yearlyAverage ? yearlyAverage.toFixed(2) * 100 : 0, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"important\",\n        style: {\n          color: calculateColor(monthlyAverage)\n        },\n        children: [\"Average Migraines for \", format(currentMonth, 'MMMM'), \": \", monthlyAverage ? monthlyAverage.toFixed(2) * 100 : 0, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"chronic\",\n        children: chronicMigraines ? \"Chronic Migraines identified\" : \"Episodic Migraines identified\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n_s(CafApp, \"bLZ+e9kV+iIYgDbCccAsl+/mgg0=\", false, function () {\n  return [useAuthState, useNavigate];\n});\n_c = CafApp;\nvar _c;\n$RefreshReg$(_c, \"CafApp\");","map":{"version":3,"names":["React","useState","useEffect","format","startOfToday","add","endOfMonth","startOfMonth","eachDayOfInterval","isSameMonth","isToday","getDay","getDaysInMonth","getDaysInYear","isLeapYear","ChevronLeftIcon","ChevronRightIcon","auth","googleProvider","signOut","useNavigate","Menu","Transition","DotsVerticalIcon","Fragment","Button","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Area","BrowserRouter","Router","Route","Routes","clear","LogOffApp","dataBase","getDocs","doc","getDoc","collection","addDoc","updateDoc","setDoc","useAuthState","useCollectionData","DateTimeDisplay","ValueSetter","jsxDEV","_jsxDEV","_Fragment","CafApp","_s","chronicMigraines","setChronicMigraines","isRemovingMode","setIsRemovingMode","remove","user","loading","error","console","log","migraineDataRef","databaseData","setdatabaseData","migraineDays","setMigraineDays","navigate","currentMonth","setCurrentMonth","Date","handleAverages","notes","setNotes","startDay","endDay","days","start","end","previousMonth","newMonth","months","nextMonth","userDocRef","uid","fetchUserData","docSnap","exists","data","Days","Notes","handleDayClick","day","formattedDate","hasMigraine","note","prompt","hasNote","trim","newMigraineDays","newNotes","calendarDataRef","HandleLogOff","err","daysInYear","daysInMonth","yearlyAverage","setYearlyAverage","monthlyAverage","setMonthlyAverage","currentMonthStr","monthlyMigraineDays","Object","keys","filter","date","startsWith","monthlyCount","length","yearlyCount","values","calculateColor","value","green","red","color","map","c","i","Math","round","join","calculateMigraineColor","max","children","className","fileName","_jsxFileName","lineNumber","columnNumber","displayName","src","photoURL","alt","onClick","style","dayName","index","isCurrentDay","noteValue","parseInt","dayColor","backgroundColor","toFixed","_c","$RefreshReg$"],"sources":["/Users/a993/Desktop/caffeineAPP/clear/ClearMind/src/pages/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { format, startOfToday, add, endOfMonth, startOfMonth, eachDayOfInterval, isSameMonth, isToday, getDay, getDaysInMonth, getDaysInYear, isLeapYear } from 'date-fns';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/solid';\nimport './index.css'; // Make sure to import your stylesheet\nimport { auth, googleProvider,  } from '../config/firebase';\nimport { signOut } from 'firebase/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { Menu, Transition } from '@headlessui/react'\nimport { DotsVerticalIcon } from '@heroicons/react/outline'\nimport { Fragment } from 'react'\n\nimport Button from 'react-bootstrap/Button';\n//import \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Area,\n} from \"recharts\";\nimport {\n  BrowserRouter as Router, Route, Routes\n} from \"react-router-dom\";\n\nimport { clear } from '@testing-library/user-event/dist/clear';\n//import { Auth } from '../components/auth';\nimport {LogOffApp} from '../components/auth';\nimport { dataBase } from '../config/firebase'; // data from fire base \nimport { getDocs } from 'firebase/firestore';\nimport { doc, getDoc, collection, addDoc, updateDoc, setDoc } from 'firebase/firestore';\nimport 'firebase/auth'; \nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nimport { DateTimeDisplay } from '../components/dateDisplay';\nimport './index.css';\nimport { ValueSetter } from 'date-fns/parse/_lib/Setter';\n\n\n    \nexport const CafApp = () => {\n  const [chronicMigraines, setChronicMigraines] = useState(false);\n\n  const [isRemovingMode, setIsRemovingMode] = useState(false);\n\n  const remove = () => {\n    if(isRemovingMode){\n      setIsRemovingMode(false);\n  }else {\n    setIsRemovingMode(true);\n  }\n  }\n  const [user, loading, error] = useAuthState(auth); // Get the authenticated user\n  console.log('open!!ed!');\n\n  const migraineDataRef = collection(dataBase, \"MigraineData\"); // passed in database and the collection we are trying to access. caffeineDatabaseRef -> reference to our UserData collection\n  const [databaseData, setdatabaseData] = useState([]);\n \n  const [migraineDays, setMigraineDays] = useState({});\n  const navigate = useNavigate();\n\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  useEffect(() => {\n    handleAverages();\n  }, [currentMonth]);\n\n  const [notes, setNotes] = useState({}); // State to store notes for each day\n\n  const startDay = startOfMonth(currentMonth);\n  const endDay = endOfMonth(currentMonth);\n\n  const days = eachDayOfInterval({\n    start: startDay.getDay() === 0 ? startDay : add(startDay, { days: -startDay.getDay() }),\n    end: endDay,\n  });\n\n  const previousMonth = () => {\n    const newMonth = add(currentMonth, { months: -1 });\n    setCurrentMonth(newMonth);\n    handleAverages(newMonth);\n  };\n  \n  const nextMonth = () => {\n    const newMonth = add(currentMonth, { months: 1 });\n    setCurrentMonth(newMonth);\n    handleAverages(newMonth);\n  };\n\n  useEffect(() => {\n    if (user) {\n      const userDocRef = doc(dataBase, 'MigraineData', user.uid);\n\n      const fetchUserData = async () => {\n        const docSnap = await getDoc(userDocRef);\n\n        if (docSnap.exists()) {\n          const data = docSnap.data();\n          setMigraineDays(data.Days || {});\n          setNotes(data.Notes || {});\n        } else {\n          // Document does not exist, initialize with empty data\n          await setDoc(userDocRef, { Days: {}, Notes: {} });\n        }\n      };\n\n      fetchUserData();\n    }\n  }, [user]);\n\n\n  const handleDayClick = async (day) => {\n    \n    const formattedDate = format(day, 'yyyy-MM-dd');\n    const hasMigraine = migraineDays[formattedDate];\n    if (!user) {\n      if(!isRemovingMode){\n        const note = hasMigraine ? prompt('Edit your migraine note:', notes[formattedDate] || '') : prompt('Migraine Severity 1-10:', '');\n        const hasNote = note !== null && note.trim() !== '';\n          if (hasNote) {\n            // Update local states\n            const newMigraineDays = { ...migraineDays, [formattedDate]: true };\n            const newNotes = { ...notes, [formattedDate]: note.trim() };\n            setMigraineDays(newMigraineDays);\n            setNotes(newNotes);\n      \n            // Update Firestore\n            const calendarDataRef = doc(dataBase, 'MigraineData', 'CalendarData');\n            await updateDoc(calendarDataRef, {\n              Days: newMigraineDays,\n              Notes: newNotes\n            });\n          } else if (hasMigraine) {\n            // Remove the note and update Firestore if the user cancels the edit\n            const newMigraineDays = { ...migraineDays, [formattedDate]: false };\n            const newNotes = { ...notes };\n            delete newNotes[formattedDate];\n            setMigraineDays(newMigraineDays);\n            setNotes(newNotes);\n      \n            const calendarDataRef = doc(dataBase, 'MigraineData', 'CalendarData');\n            await updateDoc(calendarDataRef, {\n              Days: newMigraineDays,\n              Notes: newNotes\n            });\n          }\n        }\n        if (isRemovingMode) {\n          const newMigraineDays = { ...migraineDays };\n          const newNotes = { ...notes };\n          delete newMigraineDays[formattedDate]; // Or set to false depending on your data structure\n          delete newNotes[formattedDate];\n      \n          setMigraineDays(newMigraineDays);\n          setNotes(newNotes);\n      \n          // Update Firestore\n          const calendarDataRef = doc(dataBase, 'MigraineData', 'CalendarData');\n          await updateDoc(calendarDataRef, {\n            Days: newMigraineDays,\n            Notes: newNotes\n          });\n        }\n    }else {\n      if(!isRemovingMode){\n    const note = hasMigraine ? prompt('Edit your migraine note:', notes[formattedDate] || '') : prompt('Migraine Severity 1-10:', '');\n    const hasNote = note !== null && note.trim() !== '';\n      if (hasNote) {\n        // Update local states\n        const newMigraineDays = { ...migraineDays, [formattedDate]: true };\n        const newNotes = { ...notes, [formattedDate]: note.trim() };\n        setMigraineDays(newMigraineDays);\n        setNotes(newNotes);\n  \n        // Update Firestore\n        const calendarDataRef = doc(dataBase, 'MigraineData', user.uid);\n        await updateDoc(calendarDataRef, {\n          Days: newMigraineDays,\n          Notes: newNotes\n        });\n      } else if (hasMigraine) {\n        // Remove the note and update Firestore if the user cancels the edit\n        const newMigraineDays = { ...migraineDays, [formattedDate]: false };\n        const newNotes = { ...notes };\n        delete newNotes[formattedDate];\n        setMigraineDays(newMigraineDays);\n        setNotes(newNotes);\n  \n        const calendarDataRef = doc(dataBase, 'MigraineData', user.uid);\n        await updateDoc(calendarDataRef, {\n          Days: newMigraineDays,\n          Notes: newNotes\n        });\n      }\n    }\n    if (isRemovingMode) {\n      const newMigraineDays = { ...migraineDays };\n      const newNotes = { ...notes };\n      delete newMigraineDays[formattedDate]; // Or set to false depending on your data structure\n      delete newNotes[formattedDate];\n  \n      setMigraineDays(newMigraineDays);\n      setNotes(newNotes);\n  \n      // Update Firestore\n      const calendarDataRef = doc(dataBase, 'MigraineData', user.uid);\n      await updateDoc(calendarDataRef, {\n        Days: newMigraineDays,\n        Notes: newNotes\n      });\n    }\n    }\n    \n  };\n\n  const HandleLogOff = async () => {\n    try {\n      await signOut(auth);\n      navigate('/');\n    }catch (err){\n      console.log(err);\n    }\n    \n  }\n  \n  const daysInYear = isLeapYear(currentMonth) ? 366 : 365;\n  const daysInMonth = getDaysInMonth(currentMonth);\n\n  // State hooks for averages\n  const [yearlyAverage, setYearlyAverage] = useState(0);\n  const [monthlyAverage, setMonthlyAverage] = useState(0);\n\n  // Function to handle averages\n  const handleAverages = () => {\n    const currentMonthStr = format(currentMonth, 'yyyy-MM');\n  \n    const monthlyMigraineDays = Object.keys(migraineDays).filter(date => \n      date.startsWith(currentMonthStr) && migraineDays[date]\n    );\n      \n  \n    const monthlyCount = monthlyMigraineDays.length;\n    const monthlyAverage = monthlyCount / daysInMonth;\n  \n    // If you want to keep a running total for the year as well\n    const yearlyCount = Object.values(migraineDays).filter(day => day).length;\n\n    const yearlyAverage = yearlyCount / daysInYear;\n      if(monthlyAverage >= 0.49 ){\n        setChronicMigraines(true);\n      }else if(monthlyAverage > 0){\n        setChronicMigraines(false);\n      }\n    setYearlyAverage(yearlyAverage);\n    setMonthlyAverage(monthlyAverage);\n  };\n\n  useEffect(() => {\n    handleAverages();\n  }, [migraineDays, currentMonth]);\n\n  const calculateColor = (value) => {\n    const green = [0, 128, 0]; // RGB for green\n    const red = [255, 0, 0]; // RGB for red\n    // Calculate the RGB values by interpolating between green and red\n    const color = green.map((c, i) => c + Math.round((red[i] - c) * 2*value));\n    return `rgb(${color.join(',')})`;\n  };\n  const calculateMigraineColor = (value) => {\n    //const green = [0, 128, 0]; // RGB for green\n    //const color = [255, 255 , 255]\n    const color = [255, Math.max(0, 255 - 25 * value), Math.max(0, 255 - 25 * value)];\n    return `rgb(${color.join(',')})`;\n  };\n  \n  return (\n    <>     \n    <div>\n    <div className=\"top\">\n  <div className=\"center-title\">ClearMind</div>\n    {user && (\n    <div className=\"user-info\">\n      <span>{user.displayName}</span>\n      <img src={user.photoURL} alt={user.displayName} className=\"user-photo\" />\n    </div>\n    )}\n  </div>\n \n      <div className=\"header\">\n        <button onClick={previousMonth} className=\"navigation-button\"><ChevronLeftIcon className=\"w-6 h-6\" /></button>\n        <span className=\"month-title\" style={{ color: calculateColor(monthlyAverage) }}>{format(currentMonth, 'MMMM yyyy')}</span>\n        <button onClick={nextMonth} className=\"navigation-button\"><ChevronRightIcon className=\"w-6 h-6\" /></button>\n      </div>\n      <div className=\"weekdays-header\">\n        {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((dayName, index) => (\n          <div key={index} className=\"day-cell header\">{dayName}</div>\n        ))}\n      </div>\n      <div className=\"grid-container\" >\n        {days.map((day, index) => {\n          const formattedDate = format(day, 'yyyy-MM-dd');\n          const isCurrentDay = isToday(day);\n          const noteValue = parseInt(notes[formattedDate], 10); // Assuming notes are stored as \"Migraine Severity 1-10\"\n          const dayColor = noteValue ? calculateMigraineColor(noteValue) : 'transparent'; // Default to transparent if no note\n          return (\n            <div\n              key={index}\n              className={`day-cell ${isSameMonth(day, startDay) ? '' : 'not-in-month'} ${notes[formattedDate] ? 'selected' : ''}`}\n              onClick={() => handleDayClick(day)}\n              style={{\n                backgroundColor: `white`,\n                backgroundColor: notes[formattedDate] ? dayColor : '',\n                //border: notes[formattedDate] ? '1px solid black' : ''\n              }}\n            >\n              {format(day, 'd')}\n              {notes[formattedDate] && <div className=\"note\">{notes[formattedDate]}</div>}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n    <div className='container'>\n  <button className=\"btn-custom\" onClick={HandleLogOff}>Log Out</button>\n  <button\n    onClick={() => setIsRemovingMode(!isRemovingMode)}\n    className={isRemovingMode ? 'button-remove-mode' : 'button-normal-mode'}\n  >\n    {isRemovingMode ? \"Disable Removing Mode\" : \"Remove Migraine\"}\n  </button>\n</div>\n<div>\n  <p className='important' style={{ color: calculateColor(yearlyAverage) }}>\n    Average Migraines for {format(currentMonth, 'yyyy')}: {yearlyAverage ? yearlyAverage.toFixed(2) * 100 : 0}%\n  </p>\n  <p className='important' style={{ color: calculateColor(monthlyAverage) }}>\n    Average Migraines for {format(currentMonth, 'MMMM')}: {monthlyAverage ? monthlyAverage.toFixed(2) * 100: 0}%\n  </p>\n  <p className='chronic'>{chronicMigraines ? \"Chronic Migraines identified\" : \"Episodic Migraines identified\"}</p>\n</div>\n    </>\n  );\n}; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,YAAY,EAAEC,GAAG,EAAEC,UAAU,EAAEC,YAAY,EAAEC,iBAAiB,EAAEC,WAAW,EAAEC,OAAO,EAAEC,MAAM,EAAEC,cAAc,EAAEC,aAAa,EAAEC,UAAU,QAAQ,UAAU;AAC1K,SAASC,eAAe,EAAEC,gBAAgB,QAAQ,wBAAwB;AAC1E,OAAO,aAAa,CAAC,CAAC;AACtB,SAASC,IAAI,EAAEC,cAAc,QAAU,oBAAoB;AAC3D,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,IAAI,EAAEC,UAAU,QAAQ,mBAAmB;AACpD,SAASC,gBAAgB,QAAQ,0BAA0B;AAC3D,SAASC,QAAQ,QAAQ,OAAO;AAEhC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C;AACA,SACEC,SAAS,EACTC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,OAAO,EACPC,MAAM,EACNC,IAAI,QACC,UAAU;AACjB,SACEC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QACjC,kBAAkB;AAEzB,SAASC,KAAK,QAAQ,wCAAwC;AAC9D;AACA,SAAQC,SAAS,QAAO,oBAAoB;AAC5C,SAASC,QAAQ,QAAQ,oBAAoB,CAAC,CAAC;AAC/C,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,GAAG,EAAEC,MAAM,EAAEC,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAEC,MAAM,QAAQ,oBAAoB;AACvF,OAAO,eAAe;AACtB,SAAQC,YAAY,QAAO,2BAA2B;AACtD,SAAQC,iBAAiB,QAAO,gCAAgC;AAChE,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAA7B,QAAA,IAAA8B,SAAA;AAIzD,OAAO,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGzD,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAM,CAAC0D,cAAc,EAAEC,iBAAiB,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAM4D,MAAM,GAAGA,CAAA,KAAM;IACnB,IAAGF,cAAc,EAAC;MAChBC,iBAAiB,CAAC,KAAK,CAAC;IAC5B,CAAC,MAAK;MACJA,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACA,CAAC;EACD,MAAM,CAACE,IAAI,EAAEC,OAAO,EAAEC,KAAK,CAAC,GAAGhB,YAAY,CAAC/B,IAAI,CAAC,CAAC,CAAC;EACnDgD,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EAExB,MAAMC,eAAe,GAAGvB,UAAU,CAACJ,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAGpE,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM,CAACqE,YAAY,EAAEC,eAAe,CAAC,GAAGtE,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpD,MAAMuE,QAAQ,GAAGpD,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACqD,YAAY,EAAEC,eAAe,CAAC,GAAGzE,QAAQ,CAAC,IAAI0E,IAAI,CAAC,CAAC,CAAC;EAC5DzE,SAAS,CAAC,MAAM;IACd0E,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACH,YAAY,CAAC,CAAC;EAElB,MAAM,CAACI,KAAK,EAAEC,QAAQ,CAAC,GAAG7E,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;EAExC,MAAM8E,QAAQ,GAAGxE,YAAY,CAACkE,YAAY,CAAC;EAC3C,MAAMO,MAAM,GAAG1E,UAAU,CAACmE,YAAY,CAAC;EAEvC,MAAMQ,IAAI,GAAGzE,iBAAiB,CAAC;IAC7B0E,KAAK,EAAEH,QAAQ,CAACpE,MAAM,CAAC,CAAC,KAAK,CAAC,GAAGoE,QAAQ,GAAG1E,GAAG,CAAC0E,QAAQ,EAAE;MAAEE,IAAI,EAAE,CAACF,QAAQ,CAACpE,MAAM,CAAC;IAAE,CAAC,CAAC;IACvFwE,GAAG,EAAEH;EACP,CAAC,CAAC;EAEF,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,QAAQ,GAAGhF,GAAG,CAACoE,YAAY,EAAE;MAAEa,MAAM,EAAE,CAAC;IAAE,CAAC,CAAC;IAClDZ,eAAe,CAACW,QAAQ,CAAC;IACzBT,cAAc,CAACS,QAAQ,CAAC;EAC1B,CAAC;EAED,MAAME,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMF,QAAQ,GAAGhF,GAAG,CAACoE,YAAY,EAAE;MAAEa,MAAM,EAAE;IAAE,CAAC,CAAC;IACjDZ,eAAe,CAACW,QAAQ,CAAC;IACzBT,cAAc,CAACS,QAAQ,CAAC;EAC1B,CAAC;EAEDnF,SAAS,CAAC,MAAM;IACd,IAAI4D,IAAI,EAAE;MACR,MAAM0B,UAAU,GAAG9C,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAEsB,IAAI,CAAC2B,GAAG,CAAC;MAE1D,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;QAChC,MAAMC,OAAO,GAAG,MAAMhD,MAAM,CAAC6C,UAAU,CAAC;QAExC,IAAIG,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;UACpB,MAAMC,IAAI,GAAGF,OAAO,CAACE,IAAI,CAAC,CAAC;UAC3BtB,eAAe,CAACsB,IAAI,CAACC,IAAI,IAAI,CAAC,CAAC,CAAC;UAChChB,QAAQ,CAACe,IAAI,CAACE,KAAK,IAAI,CAAC,CAAC,CAAC;QAC5B,CAAC,MAAM;UACL;UACA,MAAMhD,MAAM,CAACyC,UAAU,EAAE;YAAEM,IAAI,EAAE,CAAC,CAAC;YAAEC,KAAK,EAAE,CAAC;UAAE,CAAC,CAAC;QACnD;MACF,CAAC;MAEDL,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAAC5B,IAAI,CAAC,CAAC;EAGV,MAAMkC,cAAc,GAAG,MAAOC,GAAG,IAAK;IAEpC,MAAMC,aAAa,GAAG/F,MAAM,CAAC8F,GAAG,EAAE,YAAY,CAAC;IAC/C,MAAME,WAAW,GAAG7B,YAAY,CAAC4B,aAAa,CAAC;IAC/C,IAAI,CAACpC,IAAI,EAAE;MACT,IAAG,CAACH,cAAc,EAAC;QACjB,MAAMyC,IAAI,GAAGD,WAAW,GAAGE,MAAM,CAAC,0BAA0B,EAAExB,KAAK,CAACqB,aAAa,CAAC,IAAI,EAAE,CAAC,GAAGG,MAAM,CAAC,yBAAyB,EAAE,EAAE,CAAC;QACjI,MAAMC,OAAO,GAAGF,IAAI,KAAK,IAAI,IAAIA,IAAI,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE;QACjD,IAAID,OAAO,EAAE;UACX;UACA,MAAME,eAAe,GAAG;YAAE,GAAGlC,YAAY;YAAE,CAAC4B,aAAa,GAAG;UAAK,CAAC;UAClE,MAAMO,QAAQ,GAAG;YAAE,GAAG5B,KAAK;YAAE,CAACqB,aAAa,GAAGE,IAAI,CAACG,IAAI,CAAC;UAAE,CAAC;UAC3DhC,eAAe,CAACiC,eAAe,CAAC;UAChC1B,QAAQ,CAAC2B,QAAQ,CAAC;;UAElB;UACA,MAAMC,eAAe,GAAGhE,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;UACrE,MAAMM,SAAS,CAAC4D,eAAe,EAAE;YAC/BZ,IAAI,EAAEU,eAAe;YACrBT,KAAK,EAAEU;UACT,CAAC,CAAC;QACJ,CAAC,MAAM,IAAIN,WAAW,EAAE;UACtB;UACA,MAAMK,eAAe,GAAG;YAAE,GAAGlC,YAAY;YAAE,CAAC4B,aAAa,GAAG;UAAM,CAAC;UACnE,MAAMO,QAAQ,GAAG;YAAE,GAAG5B;UAAM,CAAC;UAC7B,OAAO4B,QAAQ,CAACP,aAAa,CAAC;UAC9B3B,eAAe,CAACiC,eAAe,CAAC;UAChC1B,QAAQ,CAAC2B,QAAQ,CAAC;UAElB,MAAMC,eAAe,GAAGhE,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;UACrE,MAAMM,SAAS,CAAC4D,eAAe,EAAE;YAC/BZ,IAAI,EAAEU,eAAe;YACrBT,KAAK,EAAEU;UACT,CAAC,CAAC;QACJ;MACF;MACA,IAAI9C,cAAc,EAAE;QAClB,MAAM6C,eAAe,GAAG;UAAE,GAAGlC;QAAa,CAAC;QAC3C,MAAMmC,QAAQ,GAAG;UAAE,GAAG5B;QAAM,CAAC;QAC7B,OAAO2B,eAAe,CAACN,aAAa,CAAC,CAAC,CAAC;QACvC,OAAOO,QAAQ,CAACP,aAAa,CAAC;QAE9B3B,eAAe,CAACiC,eAAe,CAAC;QAChC1B,QAAQ,CAAC2B,QAAQ,CAAC;;QAElB;QACA,MAAMC,eAAe,GAAGhE,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAE,cAAc,CAAC;QACrE,MAAMM,SAAS,CAAC4D,eAAe,EAAE;UAC/BZ,IAAI,EAAEU,eAAe;UACrBT,KAAK,EAAEU;QACT,CAAC,CAAC;MACJ;IACJ,CAAC,MAAK;MACJ,IAAG,CAAC9C,cAAc,EAAC;QACrB,MAAMyC,IAAI,GAAGD,WAAW,GAAGE,MAAM,CAAC,0BAA0B,EAAExB,KAAK,CAACqB,aAAa,CAAC,IAAI,EAAE,CAAC,GAAGG,MAAM,CAAC,yBAAyB,EAAE,EAAE,CAAC;QACjI,MAAMC,OAAO,GAAGF,IAAI,KAAK,IAAI,IAAIA,IAAI,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE;QACjD,IAAID,OAAO,EAAE;UACX;UACA,MAAME,eAAe,GAAG;YAAE,GAAGlC,YAAY;YAAE,CAAC4B,aAAa,GAAG;UAAK,CAAC;UAClE,MAAMO,QAAQ,GAAG;YAAE,GAAG5B,KAAK;YAAE,CAACqB,aAAa,GAAGE,IAAI,CAACG,IAAI,CAAC;UAAE,CAAC;UAC3DhC,eAAe,CAACiC,eAAe,CAAC;UAChC1B,QAAQ,CAAC2B,QAAQ,CAAC;;UAElB;UACA,MAAMC,eAAe,GAAGhE,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAEsB,IAAI,CAAC2B,GAAG,CAAC;UAC/D,MAAM3C,SAAS,CAAC4D,eAAe,EAAE;YAC/BZ,IAAI,EAAEU,eAAe;YACrBT,KAAK,EAAEU;UACT,CAAC,CAAC;QACJ,CAAC,MAAM,IAAIN,WAAW,EAAE;UACtB;UACA,MAAMK,eAAe,GAAG;YAAE,GAAGlC,YAAY;YAAE,CAAC4B,aAAa,GAAG;UAAM,CAAC;UACnE,MAAMO,QAAQ,GAAG;YAAE,GAAG5B;UAAM,CAAC;UAC7B,OAAO4B,QAAQ,CAACP,aAAa,CAAC;UAC9B3B,eAAe,CAACiC,eAAe,CAAC;UAChC1B,QAAQ,CAAC2B,QAAQ,CAAC;UAElB,MAAMC,eAAe,GAAGhE,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAEsB,IAAI,CAAC2B,GAAG,CAAC;UAC/D,MAAM3C,SAAS,CAAC4D,eAAe,EAAE;YAC/BZ,IAAI,EAAEU,eAAe;YACrBT,KAAK,EAAEU;UACT,CAAC,CAAC;QACJ;MACF;MACA,IAAI9C,cAAc,EAAE;QAClB,MAAM6C,eAAe,GAAG;UAAE,GAAGlC;QAAa,CAAC;QAC3C,MAAMmC,QAAQ,GAAG;UAAE,GAAG5B;QAAM,CAAC;QAC7B,OAAO2B,eAAe,CAACN,aAAa,CAAC,CAAC,CAAC;QACvC,OAAOO,QAAQ,CAACP,aAAa,CAAC;QAE9B3B,eAAe,CAACiC,eAAe,CAAC;QAChC1B,QAAQ,CAAC2B,QAAQ,CAAC;;QAElB;QACA,MAAMC,eAAe,GAAGhE,GAAG,CAACF,QAAQ,EAAE,cAAc,EAAEsB,IAAI,CAAC2B,GAAG,CAAC;QAC/D,MAAM3C,SAAS,CAAC4D,eAAe,EAAE;UAC/BZ,IAAI,EAAEU,eAAe;UACrBT,KAAK,EAAEU;QACT,CAAC,CAAC;MACJ;IACA;EAEF,CAAC;EAED,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMxF,OAAO,CAACF,IAAI,CAAC;MACnBuD,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,QAAOoC,GAAG,EAAC;MACV3C,OAAO,CAACC,GAAG,CAAC0C,GAAG,CAAC;IAClB;EAEF,CAAC;EAED,MAAMC,UAAU,GAAG/F,UAAU,CAAC2D,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG;EACvD,MAAMqC,WAAW,GAAGlG,cAAc,CAAC6D,YAAY,CAAC;;EAEhD;EACA,MAAM,CAACsC,aAAa,EAAEC,gBAAgB,CAAC,GAAG/G,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACgH,cAAc,EAAEC,iBAAiB,CAAC,GAAGjH,QAAQ,CAAC,CAAC,CAAC;;EAEvD;EACA,MAAM2E,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMuC,eAAe,GAAGhH,MAAM,CAACsE,YAAY,EAAE,SAAS,CAAC;IAEvD,MAAM2C,mBAAmB,GAAGC,MAAM,CAACC,IAAI,CAAChD,YAAY,CAAC,CAACiD,MAAM,CAACC,IAAI,IAC/DA,IAAI,CAACC,UAAU,CAACN,eAAe,CAAC,IAAI7C,YAAY,CAACkD,IAAI,CACvD,CAAC;IAGD,MAAME,YAAY,GAAGN,mBAAmB,CAACO,MAAM;IAC/C,MAAMV,cAAc,GAAGS,YAAY,GAAGZ,WAAW;;IAEjD;IACA,MAAMc,WAAW,GAAGP,MAAM,CAACQ,MAAM,CAACvD,YAAY,CAAC,CAACiD,MAAM,CAACtB,GAAG,IAAIA,GAAG,CAAC,CAAC0B,MAAM;IAEzE,MAAMZ,aAAa,GAAGa,WAAW,GAAGf,UAAU;IAC5C,IAAGI,cAAc,IAAI,IAAI,EAAE;MACzBvD,mBAAmB,CAAC,IAAI,CAAC;IAC3B,CAAC,MAAK,IAAGuD,cAAc,GAAG,CAAC,EAAC;MAC1BvD,mBAAmB,CAAC,KAAK,CAAC;IAC5B;IACFsD,gBAAgB,CAACD,aAAa,CAAC;IAC/BG,iBAAiB,CAACD,cAAc,CAAC;EACnC,CAAC;EAED/G,SAAS,CAAC,MAAM;IACd0E,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACN,YAAY,EAAEG,YAAY,CAAC,CAAC;EAEhC,MAAMqD,cAAc,GAAIC,KAAK,IAAK;IAChC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3B,MAAMC,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzB;IACA,MAAMC,KAAK,GAAGF,KAAK,CAACG,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGE,IAAI,CAACC,KAAK,CAAC,CAACN,GAAG,CAACI,CAAC,CAAC,GAAGD,CAAC,IAAI,CAAC,GAACL,KAAK,CAAC,CAAC;IACzE,OAAQ,OAAMG,KAAK,CAACM,IAAI,CAAC,GAAG,CAAE,GAAE;EAClC,CAAC;EACD,MAAMC,sBAAsB,GAAIV,KAAK,IAAK;IACxC;IACA;IACA,MAAMG,KAAK,GAAG,CAAC,GAAG,EAAEI,IAAI,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAGX,KAAK,CAAC,EAAEO,IAAI,CAACI,GAAG,CAAC,CAAC,EAAE,GAAG,GAAG,EAAE,GAAGX,KAAK,CAAC,CAAC;IACjF,OAAQ,OAAMG,KAAK,CAACM,IAAI,CAAC,GAAG,CAAE,GAAE;EAClC,CAAC;EAED,oBACEnF,OAAA,CAAAC,SAAA;IAAAqF,QAAA,gBACAtF,OAAA;MAAAsF,QAAA,gBACAtF,OAAA;QAAKuF,SAAS,EAAC,KAAK;QAAAD,QAAA,gBACtBtF,OAAA;UAAKuF,SAAS,EAAC,cAAc;UAAAD,QAAA,EAAC;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EAC1ClF,IAAI,iBACLT,OAAA;UAAKuF,SAAS,EAAC,WAAW;UAAAD,QAAA,gBACxBtF,OAAA;YAAAsF,QAAA,EAAO7E,IAAI,CAACmF;UAAW;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC/B3F,OAAA;YAAK6F,GAAG,EAAEpF,IAAI,CAACqF,QAAS;YAACC,GAAG,EAAEtF,IAAI,CAACmF,WAAY;YAACL,SAAS,EAAC;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtE,CACJ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAEF3F,OAAA;QAAKuF,SAAS,EAAC,QAAQ;QAAAD,QAAA,gBACrBtF,OAAA;UAAQgG,OAAO,EAAEjE,aAAc;UAACwD,SAAS,EAAC,mBAAmB;UAAAD,QAAA,eAACtF,OAAA,CAACtC,eAAe;YAAC6H,SAAS,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9G3F,OAAA;UAAMuF,SAAS,EAAC,aAAa;UAACU,KAAK,EAAE;YAAEpB,KAAK,EAAEJ,cAAc,CAACb,cAAc;UAAE,CAAE;UAAA0B,QAAA,EAAExI,MAAM,CAACsE,YAAY,EAAE,WAAW;QAAC;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC1H3F,OAAA;UAAQgG,OAAO,EAAE9D,SAAU;UAACqD,SAAS,EAAC,mBAAmB;UAAAD,QAAA,eAACtF,OAAA,CAACrC,gBAAgB;YAAC4H,SAAS,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxG,CAAC,eACN3F,OAAA;QAAKuF,SAAS,EAAC,iBAAiB;QAAAD,QAAA,EAC7B,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,CAAC,CAACR,GAAG,CAAC,CAACoB,OAAO,EAAEC,KAAK,kBACjGnG,OAAA;UAAiBuF,SAAS,EAAC,iBAAiB;UAAAD,QAAA,EAAEY;QAAO,GAA3CC,KAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA4C,CAC5D;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN3F,OAAA;QAAKuF,SAAS,EAAC,gBAAgB;QAAAD,QAAA,EAC5B1D,IAAI,CAACkD,GAAG,CAAC,CAAClC,GAAG,EAAEuD,KAAK,KAAK;UACxB,MAAMtD,aAAa,GAAG/F,MAAM,CAAC8F,GAAG,EAAE,YAAY,CAAC;UAC/C,MAAMwD,YAAY,GAAG/I,OAAO,CAACuF,GAAG,CAAC;UACjC,MAAMyD,SAAS,GAAGC,QAAQ,CAAC9E,KAAK,CAACqB,aAAa,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;UACtD,MAAM0D,QAAQ,GAAGF,SAAS,GAAGjB,sBAAsB,CAACiB,SAAS,CAAC,GAAG,aAAa,CAAC,CAAC;UAChF,oBACErG,OAAA;YAEEuF,SAAS,EAAG,YAAWnI,WAAW,CAACwF,GAAG,EAAElB,QAAQ,CAAC,GAAG,EAAE,GAAG,cAAe,IAAGF,KAAK,CAACqB,aAAa,CAAC,GAAG,UAAU,GAAG,EAAG,EAAE;YACpHmD,OAAO,EAAEA,CAAA,KAAMrD,cAAc,CAACC,GAAG,CAAE;YACnCqD,KAAK,EAAE;cACLO,eAAe,EAAG,OAAM;cACxBA,eAAe,EAAEhF,KAAK,CAACqB,aAAa,CAAC,GAAG0D,QAAQ,GAAG;cACnD;YACF,CAAE;YAAAjB,QAAA,GAEDxI,MAAM,CAAC8F,GAAG,EAAE,GAAG,CAAC,EAChBpB,KAAK,CAACqB,aAAa,CAAC,iBAAI7C,OAAA;cAAKuF,SAAS,EAAC,MAAM;cAAAD,QAAA,EAAE9D,KAAK,CAACqB,aAAa;YAAC;cAAA2C,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA,GAVtEQ,KAAK;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAWP,CAAC;QAEV,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN3F,OAAA;MAAKuF,SAAS,EAAC,WAAW;MAAAD,QAAA,gBAC5BtF,OAAA;QAAQuF,SAAS,EAAC,YAAY;QAACS,OAAO,EAAE1C,YAAa;QAAAgC,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACtE3F,OAAA;QACEgG,OAAO,EAAEA,CAAA,KAAMzF,iBAAiB,CAAC,CAACD,cAAc,CAAE;QAClDiF,SAAS,EAAEjF,cAAc,GAAG,oBAAoB,GAAG,oBAAqB;QAAAgF,QAAA,EAEvEhF,cAAc,GAAG,uBAAuB,GAAG;MAAiB;QAAAkF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACN3F,OAAA;MAAAsF,QAAA,gBACEtF,OAAA;QAAGuF,SAAS,EAAC,WAAW;QAACU,KAAK,EAAE;UAAEpB,KAAK,EAAEJ,cAAc,CAACf,aAAa;QAAE,CAAE;QAAA4B,QAAA,GAAC,wBAClD,EAACxI,MAAM,CAACsE,YAAY,EAAE,MAAM,CAAC,EAAC,IAAE,EAACsC,aAAa,GAAGA,aAAa,CAAC+C,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,EAAC,GAC5G;MAAA;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ3F,OAAA;QAAGuF,SAAS,EAAC,WAAW;QAACU,KAAK,EAAE;UAAEpB,KAAK,EAAEJ,cAAc,CAACb,cAAc;QAAE,CAAE;QAAA0B,QAAA,GAAC,wBACnD,EAACxI,MAAM,CAACsE,YAAY,EAAE,MAAM,CAAC,EAAC,IAAE,EAACwC,cAAc,GAAGA,cAAc,CAAC6C,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAE,CAAC,EAAC,GAC7G;MAAA;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ3F,OAAA;QAAGuF,SAAS,EAAC,SAAS;QAAAD,QAAA,EAAElF,gBAAgB,GAAG,8BAA8B,GAAG;MAA+B;QAAAoF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7G,CAAC;EAAA,eACA,CAAC;AAEP,CAAC;AAACxF,EAAA,CA7SWD,MAAM;EAAA,QAYcP,YAAY,EAO1B5B,WAAW;AAAA;AAAA2I,EAAA,GAnBjBxG,MAAM;AAAA,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}