{"ast":null,"code":"var _jsxFileName = \"/Users/a993/Desktop/caffeineAPP/clear/ClearMind/src/App.js\";\nimport React, { useState, useEffect } from 'react'; // Import useState\nimport { auth, googleProvider } from './config/firebase';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport { Auth } from './components/auth.jsx';\nimport { dataBase } from './config/firebase'; // data from fire base \nimport { getDocs } from 'firebase/firestore';\nimport { getDoc, collection, addDoc } from 'firebase/firestore';\nimport 'firebase/auth';\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport { DateTimeDisplay } from './components/dateDisplay';\nimport { addDays, subDays } from \"date-fns\";\nimport { CafApp, EventCalendar } from \"./pages/index.jsx\";\nimport TriggerTrackerForm from './components/TriggerTracker.js';\n//import { LoginAuth } from './components/login';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst availableTimes = [\"12:00AM\", \"1:00\", \"2:00\", \"3:00\", \"4:00\", \"5:00\", \"6:00\", \"7:00\", \"8:00\", \"9:00\", \"10:00\", \"11:00\", \"12:00PM\", \"1:00\", \"2:00\", \"3:00\", \"4:00\", \"5:00\", \"6:00\", \"7:00\", \"8:00\", \"9:00\", \"10:00\", \"11:00\", \"11:59\"];\nconst availableAM = [\"AM\", \"PM\"];\nconst availableDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          element: /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/form\",\n          exact: true,\n          element: /*#__PURE__*/_jsxDEV(TriggerTrackerForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/app\",\n          element: /*#__PURE__*/_jsxDEV(CafApp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 39\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n/*\n\n\n  const caffeineDatabaseRef = collection(dataBase, \"UserData\"); // passed in database and the collection we are trying to access. caffeineDatabaseRef -> reference to our UserData collection\n  const mondayCafData = collection(dataBase, \"Monday\"); // reference to the Monday document in UserData collection\n  const [databaseData, setdatabaseData] = useState([]);\n  useEffect(() => {\n    \n    const getdatabaseData = async() => { \n      try {\n        const data = await getDocs(caffeineDatabaseRef); // get docs will get all of the docs inside this collection (i.e. UserData collection)\n        //console.log(data); // data is a query snapshot i.e. unfilted, a shit load of random data\n        const filteredData = data.docs.map((doc) => ({...doc.data(), id: doc.id})); // accessing all docs from data(UserData), returns only doc data, and user ID\n        console.log(filteredData);\n        setdatabaseData(filteredData);\n      }catch(err){\n        console.log(err);\n      }\n    };\n    getdatabaseData();\n  }, []);\n  \n  const [chartData, setChartData] = useState(initialData);\n  //const [weekDays, setweekDays] = useState(Array(7).fill(initialData));\n  const [caffeine, setCaffeine] = useState('');\n  const [time, setTime] = useState('');\n  const [AMPM, setAMPM] = useState('');\n  const [buttonClicked, setButtonClicked] = useState('');\n  const [dayOfWeek, setDayOfWeek] = useState('');\n  const [MondayData, setMondayData] = useState(initialData.map(item => ({ ...item })));\n  const [TuesdayData, setTuesdayData] = useState(initialData.map(item => ({ ...item })));\n  const [WednesdayData, setWednesdayData] = useState(initialData.map(item => ({ ...item })));\n  const [ThursdayData, setThursdayData] = useState(initialData.map(item => ({ ...item })));\n  const [FridayData, setFridayData] = useState(initialData.map(item => ({ ...item })));\n  const [SaturdayData, setSaturdayData] = useState(initialData.map(item => ({ ...item })));\n  const [SundayData, setSundayData] = useState(initialData.map(item => ({ ...item })));\n\n  const clearData = () => {\n    let tempData = modifiedData.map(item => ({ ...item }));// creates structured array to modify data(i.e. has all the times)\n    if(buttonClicked == \"Monday\"){\n\n     databaseData.forEach((document) => { // for each document in the database (which is only 1 for now) \n      if (document.caffeineData && Array.isArray(document.caffeineData)) {\n        console.log(document.caffeineData[5]); // document.caffeineData is an array of caffeine data\n        document.caffeineData.forEach((item, index) => { // iterates through each item in the array and sets our tempData to the value of the item at the same index\n          tempData[index].Caffeine = item;\n        });\n      }\n    });\n      console.log(tempData);\n      setMondayData(tempData); // sets the data for the graph to the tempData\n   }else if(buttonClicked == \"Tuesday\"){\n      setTuesdayData(initialData.map(item => ({ ...item })));\n   }else if(buttonClicked == \"Wednesday\"){\n    setWednesdayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Thursday\"){\n    setThursdayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Friday\"){\n    setFridayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Saturday\"){\n    setSaturdayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Sunday\"){\n    setSundayData(initialData.map(item => ({ ...item })));\n  }\n   setButtonClicked(\"Empty Graph\");\n   setChartData(initialData);\n   \n  } \n \n\n  const Monday = () => {\n    setChartData(MondayData);\n    setButtonClicked(\"Monday\");\n  }\n  const Tuesday = () => {\n    setChartData(TuesdayData);\n    setButtonClicked(\"Tuesday\");\n\n  }\n  const Wednesday = () => {\n    setChartData(WednesdayData);\n    setButtonClicked(\"Wednesday\");\n\n  }\n  const Thursday = () => {\n    setChartData(ThursdayData);\n    setButtonClicked(\"Thursday\");\n\n  }\n  const Friday = () => {\n    setChartData(FridayData);\n    setButtonClicked(\"Friday\");\n\n  }\n  const Saturday = () => {\n    setChartData(SaturdayData);\n    setButtonClicked(\"Saturday\");\n\n  }\n  const Sunday = () => {\n    setChartData(SundayData);\n    setButtonClicked(\"Sunday\");\n\n  }\n  const AddCaffeineToCurrentTime = () => {\n// add time \n\n\n  }\n  const handleSubmit = async () => {\n    let newData = modifiedData.map(item => ({ ...item }));\n    let startIndex = 0;\n    //let newData = initialData.slice();\n    if(dayOfWeek == \"Monday\"){\n       newData = MondayData.slice();\n    }else if(dayOfWeek == \"Tuesday\"){\n       newData = TuesdayData.slice();\n    }else if(dayOfWeek == \"Wednesday\"){\n       newData = WednesdayData.slice();\n    }else if(dayOfWeek == \"Thursday\"){\n       newData = ThursdayData.slice();\n    }else if(dayOfWeek == \"Friday\"){\n       newData = FridayData.slice();\n    }else if(dayOfWeek == \"Saturday\"){\n       newData = SaturdayData.slice();\n    }else if(dayOfWeek == \"Sunday\"){\n       newData = SundayData.slice();\n    }\n\n  if(AMPM == \"AM\"){\n    for (let i = 0; i < newData.length; i++) {\n      if(newData[i].name == time){\n        startIndex = i;\n        break;\n      }\n    } \n  }else if(AMPM == \"PM\"){\n    for (let i = (newData.length -1); i > 0; i--) {\n      if(newData[i].name == time){\n        startIndex = i;\n        break;\n      }\n    }\n  }\n\n  let caffeineAmount = parseInt(caffeine, 10);\n  newData[startIndex].Caffeine += caffeineAmount;\n\n\n  for(let i = (startIndex + 1); i < newData.length; i++){\n      caffeineAmount*=0.88;\n      newData[i].Caffeine += caffeineAmount;\n  }\n\n    if(dayOfWeek == \"Monday\"){\n      setButtonClicked(\"Monday\");\n\n      TuesdayData[0].Caffeine = newData[24].Caffeine;\n      let newCaf = TuesdayData[0].Caffeine;\n      let newIndex = 0;\n      for (let i = 1; i < TuesdayData.length; i++) {\n        let currentIndex = (newIndex + i) % newData.length;\n          newCaf *= 0.88; // 88% of previous hour's value\n          TuesdayData[i].Caffeine = newCaf;\n        }\n      \n        await addDoc(caffeineDatabaseRef, { // adds a new document to the database\n          caffeineData: MondayData.map((item) => item.Caffeine), // adds the caffeine data to the database\n        });\n    }else if(dayOfWeek == \"Tuesday\"){\n      setButtonClicked(\"Tuesday\");\n\n      WednesdayData[0].Caffeine = TuesdayData[24].Caffeine;\n      let newCaf = WednesdayData[0].Caffeine;\n      for (let i = 1; i < WednesdayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          WednesdayData[i].Caffeine = newCaf;\n        }\n    }else if(dayOfWeek == \"Wednesday\"){\n      setButtonClicked(\"Wednesday\");\n\n      ThursdayData[0].Caffeine = WednesdayData[24].Caffeine;\n      let newCaf = ThursdayData[0].Caffeine;\n      for (let i = 1; i < ThursdayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          ThursdayData[i].Caffeine = newCaf;\n        }\n      \n    }else if(dayOfWeek == \"Thursday\"){\n      setButtonClicked(\"Thursday\");\n\n      FridayData[0].Caffeine = ThursdayData[24].Caffeine;\n      let newCaf = FridayData[0].Caffeine;\n      for (let i = 1; i < FridayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          FridayData[i].Caffeine = newCaf;\n        }\n      \n      \n    }else if(dayOfWeek == \"Friday\"){\n      setButtonClicked(\"Friday\");\n\n      SaturdayData[0].Caffeine = FridayData[24].Caffeine;\n      let newCaf = SaturdayData[0].Caffeine;\n      for (let i = 1; i < SaturdayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          SaturdayData[i].Caffeine = newCaf;\n        }\n      \n      \n    }else if(dayOfWeek == \"Saturday\"){\n      setButtonClicked(\"Saturday\");\n\n      SundayData[0].Caffeine = SaturdayData[24].Caffeine;\n      let newCaf = SundayData[0].Caffeine;\n      for (let i = 1; i < SundayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          SundayData[i].Caffeine = newCaf;\n        }\n      \n      \n    }else if(dayOfWeek == \"Sunday\"){\n      setButtonClicked(\"Sunday\");\n    }\n    setChartData(newData);\n  };\n  //const [user] = useAuthState(Auth);\n // console.log(user);\n\n  return (\n    <>\n      <div className=\"App\">\n       \n        <h1>Blood Caffeine Level</h1>\n        \n\n        \n       <DateTimeDisplay/>\n        <Auth/>\n    \n         \n        \n   \n        <input\n          type=\"text\"\n          value={time}\n          onChange={(e) => setTime(e.target.value)}\n          placeholder=\"Enter time (e.g., 4:00)\"\n        />\n        \n        <select value={time} onChange={(e) => setTime(e.target.value)}>\n          <option value=\"\">Select Time</option>\n          {availableTimes.map((timeOption, index) => (\n            <option key={index} value={timeOption}>{timeOption}</option>\n          ))}\n        </select>\n        <select value={AMPM} onChange={(e) => setAMPM(e.target.value)}>\n          <option value=\"\">Select AM/PM</option>\n          {availableAM.map((timeOption, index) => (\n            <option key={index} value={timeOption}>{timeOption}</option>\n          ))}\n        </select>\n        <select value={dayOfWeek} onChange={(e) => setDayOfWeek(e.target.value)}>\n          <option value=\"\">Select Day</option>\n          {availableDays.map((timeOption, index) => (\n            <option key={index} value={timeOption}>{timeOption}</option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          value={caffeine}\n          onChange={(e) => setCaffeine(e.target.value)}\n          placeholder=\"Caffeine amount (mg)\"\n        />\n        <Button onClick={() => {handleSubmit()}}>Add to Chart</Button>\n        <Button onClick={() => {AddCaffeineToCurrentTime()}}>Add Caffeine To Current Time</Button>\n      </div>\n\n      <LineChart\n        width={1800}\n        height={400}\n        data={chartData}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"Caffeine\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 0 }}\n        />\n      </LineChart>\n      \n      <div>\n        <Button onClick={() => {Monday()}}>Monday</Button>\n        <Button onClick={() => {Tuesday()}}>Tuesday</Button>\n        <Button onClick={() => {Wednesday()}}>Wednesday</Button>\n        <Button onClick={() => {Thursday()}}>Thursday</Button>\n        <Button onClick={() => {Friday()}}>Friday</Button>\n        <Button onClick={() => {Saturday()}}>Saturday</Button>\n        <Button onClick={() => {Sunday()}}>Sunday</Button>\n        <Button onClick={() => {clearData()}}>Clear Graph</Button>\n        <Button onClick={() => {processCaffeineData()}}>process caffeine Graph</Button>\n\n      </div>\n      \n    </>\n  );\n  */\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","auth","googleProvider","Button","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","BrowserRouter","Router","Route","Routes","clear","Auth","dataBase","getDocs","getDoc","collection","addDoc","useAuthState","useCollectionData","DateTimeDisplay","addDays","subDays","CafApp","EventCalendar","TriggerTrackerForm","jsxDEV","_jsxDEV","availableTimes","availableAM","availableDays","App","className","children","path","exact","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/a993/Desktop/caffeineAPP/clear/ClearMind/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // Import useState\nimport { auth, googleProvider } from './config/firebase';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport {\n  BrowserRouter as Router, Route, Routes\n} from \"react-router-dom\";\n\nimport { clear } from '@testing-library/user-event/dist/clear';\nimport { Auth } from './components/auth.jsx';\nimport { dataBase } from './config/firebase'; // data from fire base \nimport { getDocs } from 'firebase/firestore';\nimport { getDoc, collection, addDoc } from 'firebase/firestore';\nimport 'firebase/auth'; \nimport {useAuthState} from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\nimport { DateTimeDisplay } from './components/dateDisplay';\nimport {addDays, subDays} from \"date-fns\"\n\nimport {CafApp, EventCalendar} from \"./pages/index.jsx\";\nimport TriggerTrackerForm from './components/TriggerTracker.js';\n//import { LoginAuth } from './components/login';\n\n\nconst availableTimes = [\"12:00AM\", \"1:00\",\"2:00\",\"3:00\", \"4:00\",\"5:00\",\"6:00\",\"7:00\", \"8:00\",\"9:00\", \"10:00\", \"11:00\", \"12:00PM\",\"1:00\",\"2:00\",\"3:00\", \"4:00\",\"5:00\",\"6:00\",\"7:00\", \"8:00\",\"9:00\", \"10:00\", \"11:00\", \"11:59\"];\nconst availableAM = [\"AM\", \"PM\"];\nconst availableDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Routes>\n          <Route path=\"/\" exact element={<Auth/>}/>\n          <Route path =\"/form\" exact element = {<TriggerTrackerForm/>}/>\n          <Route path=\"/app\" element={<CafApp/>}/>\n        </Routes>\n      </Router>\n    </div>\n  )\n}\n\n\n \n\nexport default App;\n/*\n\n\n  const caffeineDatabaseRef = collection(dataBase, \"UserData\"); // passed in database and the collection we are trying to access. caffeineDatabaseRef -> reference to our UserData collection\n  const mondayCafData = collection(dataBase, \"Monday\"); // reference to the Monday document in UserData collection\n  const [databaseData, setdatabaseData] = useState([]);\n  useEffect(() => {\n    \n    const getdatabaseData = async() => { \n      try {\n        const data = await getDocs(caffeineDatabaseRef); // get docs will get all of the docs inside this collection (i.e. UserData collection)\n        //console.log(data); // data is a query snapshot i.e. unfilted, a shit load of random data\n        const filteredData = data.docs.map((doc) => ({...doc.data(), id: doc.id})); // accessing all docs from data(UserData), returns only doc data, and user ID\n        console.log(filteredData);\n        setdatabaseData(filteredData);\n      }catch(err){\n        console.log(err);\n      }\n    };\n    getdatabaseData();\n  }, []);\n  \n  const [chartData, setChartData] = useState(initialData);\n  //const [weekDays, setweekDays] = useState(Array(7).fill(initialData));\n  const [caffeine, setCaffeine] = useState('');\n  const [time, setTime] = useState('');\n  const [AMPM, setAMPM] = useState('');\n  const [buttonClicked, setButtonClicked] = useState('');\n  const [dayOfWeek, setDayOfWeek] = useState('');\n  const [MondayData, setMondayData] = useState(initialData.map(item => ({ ...item })));\n  const [TuesdayData, setTuesdayData] = useState(initialData.map(item => ({ ...item })));\n  const [WednesdayData, setWednesdayData] = useState(initialData.map(item => ({ ...item })));\n  const [ThursdayData, setThursdayData] = useState(initialData.map(item => ({ ...item })));\n  const [FridayData, setFridayData] = useState(initialData.map(item => ({ ...item })));\n  const [SaturdayData, setSaturdayData] = useState(initialData.map(item => ({ ...item })));\n  const [SundayData, setSundayData] = useState(initialData.map(item => ({ ...item })));\n\n  const clearData = () => {\n    let tempData = modifiedData.map(item => ({ ...item }));// creates structured array to modify data(i.e. has all the times)\n    if(buttonClicked == \"Monday\"){\n\n     databaseData.forEach((document) => { // for each document in the database (which is only 1 for now) \n      if (document.caffeineData && Array.isArray(document.caffeineData)) {\n        console.log(document.caffeineData[5]); // document.caffeineData is an array of caffeine data\n        document.caffeineData.forEach((item, index) => { // iterates through each item in the array and sets our tempData to the value of the item at the same index\n          tempData[index].Caffeine = item;\n        });\n      }\n    });\n      console.log(tempData);\n      setMondayData(tempData); // sets the data for the graph to the tempData\n   }else if(buttonClicked == \"Tuesday\"){\n      setTuesdayData(initialData.map(item => ({ ...item })));\n   }else if(buttonClicked == \"Wednesday\"){\n    setWednesdayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Thursday\"){\n    setThursdayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Friday\"){\n    setFridayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Saturday\"){\n    setSaturdayData(initialData.map(item => ({ ...item })));\n  }else if(buttonClicked == \"Sunday\"){\n    setSundayData(initialData.map(item => ({ ...item })));\n  }\n   setButtonClicked(\"Empty Graph\");\n   setChartData(initialData);\n   \n  } \n \n\n  const Monday = () => {\n    setChartData(MondayData);\n    setButtonClicked(\"Monday\");\n  }\n  const Tuesday = () => {\n    setChartData(TuesdayData);\n    setButtonClicked(\"Tuesday\");\n\n  }\n  const Wednesday = () => {\n    setChartData(WednesdayData);\n    setButtonClicked(\"Wednesday\");\n\n  }\n  const Thursday = () => {\n    setChartData(ThursdayData);\n    setButtonClicked(\"Thursday\");\n\n  }\n  const Friday = () => {\n    setChartData(FridayData);\n    setButtonClicked(\"Friday\");\n\n  }\n  const Saturday = () => {\n    setChartData(SaturdayData);\n    setButtonClicked(\"Saturday\");\n\n  }\n  const Sunday = () => {\n    setChartData(SundayData);\n    setButtonClicked(\"Sunday\");\n\n  }\n  const AddCaffeineToCurrentTime = () => {\n// add time \n\n\n  }\n  const handleSubmit = async () => {\n    let newData = modifiedData.map(item => ({ ...item }));\n    let startIndex = 0;\n    //let newData = initialData.slice();\n    if(dayOfWeek == \"Monday\"){\n       newData = MondayData.slice();\n    }else if(dayOfWeek == \"Tuesday\"){\n       newData = TuesdayData.slice();\n    }else if(dayOfWeek == \"Wednesday\"){\n       newData = WednesdayData.slice();\n    }else if(dayOfWeek == \"Thursday\"){\n       newData = ThursdayData.slice();\n    }else if(dayOfWeek == \"Friday\"){\n       newData = FridayData.slice();\n    }else if(dayOfWeek == \"Saturday\"){\n       newData = SaturdayData.slice();\n    }else if(dayOfWeek == \"Sunday\"){\n       newData = SundayData.slice();\n    }\n\n  if(AMPM == \"AM\"){\n    for (let i = 0; i < newData.length; i++) {\n      if(newData[i].name == time){\n        startIndex = i;\n        break;\n      }\n    } \n  }else if(AMPM == \"PM\"){\n    for (let i = (newData.length -1); i > 0; i--) {\n      if(newData[i].name == time){\n        startIndex = i;\n        break;\n      }\n    }\n  }\n\n  let caffeineAmount = parseInt(caffeine, 10);\n  newData[startIndex].Caffeine += caffeineAmount;\n\n\n  for(let i = (startIndex + 1); i < newData.length; i++){\n      caffeineAmount*=0.88;\n      newData[i].Caffeine += caffeineAmount;\n  }\n\n    if(dayOfWeek == \"Monday\"){\n      setButtonClicked(\"Monday\");\n\n      TuesdayData[0].Caffeine = newData[24].Caffeine;\n      let newCaf = TuesdayData[0].Caffeine;\n      let newIndex = 0;\n      for (let i = 1; i < TuesdayData.length; i++) {\n        let currentIndex = (newIndex + i) % newData.length;\n          newCaf *= 0.88; // 88% of previous hour's value\n          TuesdayData[i].Caffeine = newCaf;\n        }\n      \n        await addDoc(caffeineDatabaseRef, { // adds a new document to the database\n          caffeineData: MondayData.map((item) => item.Caffeine), // adds the caffeine data to the database\n        });\n    }else if(dayOfWeek == \"Tuesday\"){\n      setButtonClicked(\"Tuesday\");\n\n      WednesdayData[0].Caffeine = TuesdayData[24].Caffeine;\n      let newCaf = WednesdayData[0].Caffeine;\n      for (let i = 1; i < WednesdayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          WednesdayData[i].Caffeine = newCaf;\n        }\n    }else if(dayOfWeek == \"Wednesday\"){\n      setButtonClicked(\"Wednesday\");\n\n      ThursdayData[0].Caffeine = WednesdayData[24].Caffeine;\n      let newCaf = ThursdayData[0].Caffeine;\n      for (let i = 1; i < ThursdayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          ThursdayData[i].Caffeine = newCaf;\n        }\n      \n    }else if(dayOfWeek == \"Thursday\"){\n      setButtonClicked(\"Thursday\");\n\n      FridayData[0].Caffeine = ThursdayData[24].Caffeine;\n      let newCaf = FridayData[0].Caffeine;\n      for (let i = 1; i < FridayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          FridayData[i].Caffeine = newCaf;\n        }\n      \n      \n    }else if(dayOfWeek == \"Friday\"){\n      setButtonClicked(\"Friday\");\n\n      SaturdayData[0].Caffeine = FridayData[24].Caffeine;\n      let newCaf = SaturdayData[0].Caffeine;\n      for (let i = 1; i < SaturdayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          SaturdayData[i].Caffeine = newCaf;\n        }\n      \n      \n    }else if(dayOfWeek == \"Saturday\"){\n      setButtonClicked(\"Saturday\");\n\n      SundayData[0].Caffeine = SaturdayData[24].Caffeine;\n      let newCaf = SundayData[0].Caffeine;\n      for (let i = 1; i < SundayData.length; i++) {\n          newCaf *= 0.88; // 88% of previous hour's value\n          SundayData[i].Caffeine = newCaf;\n        }\n      \n      \n    }else if(dayOfWeek == \"Sunday\"){\n      setButtonClicked(\"Sunday\");\n    }\n    setChartData(newData);\n  };\n  //const [user] = useAuthState(Auth);\n // console.log(user);\n\n  return (\n    <>\n      <div className=\"App\">\n       \n        <h1>Blood Caffeine Level</h1>\n        \n\n        \n       <DateTimeDisplay/>\n        <Auth/>\n    \n         \n        \n   \n        <input\n          type=\"text\"\n          value={time}\n          onChange={(e) => setTime(e.target.value)}\n          placeholder=\"Enter time (e.g., 4:00)\"\n        />\n        \n        <select value={time} onChange={(e) => setTime(e.target.value)}>\n          <option value=\"\">Select Time</option>\n          {availableTimes.map((timeOption, index) => (\n            <option key={index} value={timeOption}>{timeOption}</option>\n          ))}\n        </select>\n        <select value={AMPM} onChange={(e) => setAMPM(e.target.value)}>\n          <option value=\"\">Select AM/PM</option>\n          {availableAM.map((timeOption, index) => (\n            <option key={index} value={timeOption}>{timeOption}</option>\n          ))}\n        </select>\n        <select value={dayOfWeek} onChange={(e) => setDayOfWeek(e.target.value)}>\n          <option value=\"\">Select Day</option>\n          {availableDays.map((timeOption, index) => (\n            <option key={index} value={timeOption}>{timeOption}</option>\n          ))}\n        </select>\n        <input\n          type=\"number\"\n          value={caffeine}\n          onChange={(e) => setCaffeine(e.target.value)}\n          placeholder=\"Caffeine amount (mg)\"\n        />\n        <Button onClick={() => {handleSubmit()}}>Add to Chart</Button>\n        <Button onClick={() => {AddCaffeineToCurrentTime()}}>Add Caffeine To Current Time</Button>\n      </div>\n\n      <LineChart\n        width={1800}\n        height={400}\n        data={chartData}\n        margin={{\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"Caffeine\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 0 }}\n        />\n      </LineChart>\n      \n      <div>\n        <Button onClick={() => {Monday()}}>Monday</Button>\n        <Button onClick={() => {Tuesday()}}>Tuesday</Button>\n        <Button onClick={() => {Wednesday()}}>Wednesday</Button>\n        <Button onClick={() => {Thursday()}}>Thursday</Button>\n        <Button onClick={() => {Friday()}}>Friday</Button>\n        <Button onClick={() => {Saturday()}}>Saturday</Button>\n        <Button onClick={() => {Sunday()}}>Sunday</Button>\n        <Button onClick={() => {clearData()}}>Clear Graph</Button>\n        <Button onClick={() => {processCaffeineData()}}>process caffeine Graph</Button>\n\n      </div>\n      \n    </>\n  );\n  */"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7TA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}